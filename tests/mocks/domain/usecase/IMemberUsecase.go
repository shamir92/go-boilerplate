// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	entities "simple-invitation/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// IMemberUsecase is an autogenerated mock type for the IMemberUsecase type
type IMemberUsecase struct {
	mock.Mock
}

// FetchAll provides a mock function with given fields:
func (_m *IMemberUsecase) FetchAll() ([]*entities.Member, error) {
	ret := _m.Called()

	var r0 []*entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Member, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Member); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMemberByEmail provides a mock function with given fields: email
func (_m *IMemberUsecase) FetchMemberByEmail(email string) (*entities.Member, error) {
	ret := _m.Called(email)

	var r0 *entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Member, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Member); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMemberById provides a mock function with given fields: id
func (_m *IMemberUsecase) FetchMemberById(id string) (*entities.Member, error) {
	ret := _m.Called(id)

	var r0 *entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Member, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Member); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreNewMeber provides a mock function with given fields: email, firstname, lastname
func (_m *IMemberUsecase) StoreNewMeber(email string, firstname string, lastname string) error {
	ret := _m.Called(email, firstname, lastname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, firstname, lastname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMemberUsecase creates a new instance of IMemberUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMemberUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMemberUsecase {
	mock := &IMemberUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
