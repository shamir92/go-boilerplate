// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	entities "simple-invitation/domain/entities"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	uuid "github.com/google/uuid"
)

// IMemberRepository is an autogenerated mock type for the IMemberRepository type
type IMemberRepository struct {
	mock.Mock
}

// FetchAll provides a mock function with given fields:
func (_m *IMemberRepository) FetchAll() ([]*entities.Member, error) {
	ret := _m.Called()

	var r0 []*entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Member, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Member); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchDBReader provides a mock function with given fields:
func (_m *IMemberRepository) FetchDBReader() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// FetchDBWriter provides a mock function with given fields:
func (_m *IMemberRepository) FetchDBWriter() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// FetchMemberByEmail provides a mock function with given fields: email
func (_m *IMemberRepository) FetchMemberByEmail(email string) (*entities.Member, error) {
	ret := _m.Called(email)

	var r0 *entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Member, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Member); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMemberById provides a mock function with given fields: idMember
func (_m *IMemberRepository) FetchMemberById(idMember uuid.UUID) (*entities.Member, error) {
	ret := _m.Called(idMember)

	var r0 *entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*entities.Member, error)); ok {
		return rf(idMember)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *entities.Member); ok {
		r0 = rf(idMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(idMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchMemberByListId provides a mock function with given fields: ids
func (_m *IMemberRepository) FetchMemberByListId(ids []uuid.UUID) ([]*entities.Member, error) {
	ret := _m.Called(ids)

	var r0 []*entities.Member
	var r1 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID) ([]*entities.Member, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []*entities.Member); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Member)
		}
	}

	if rf, ok := ret.Get(1).(func([]uuid.UUID) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreNewMeber provides a mock function with given fields: email, firstname, lastname
func (_m *IMemberRepository) StoreNewMeber(email string, firstname string, lastname string) error {
	ret := _m.Called(email, firstname, lastname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, firstname, lastname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMemberRepository creates a new instance of IMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMemberRepository {
	mock := &IMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
